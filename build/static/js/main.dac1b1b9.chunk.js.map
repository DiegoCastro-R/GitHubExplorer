{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","styles/global.ts","pages/Dashboard/styles.ts","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","Title","styled","h1","Error","span","Form","form","props","hasError","css","shade","Repositories","div","api","axios","create","baseURL","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","placeholder","value","onChange","e","target","type","map","repo","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","loadData","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dac1b1b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\n  -webkit-font-smoothing: antialiased;\n}\n\nbody, input, button  {\n  font:  16px Roboto, sans-serif;\n\n}\n\n#root {\n  max-width: 960px;\n  margin: 0 auto;\n  padding:40px 20px;\n}\n\nbutton{\n  cursor: pointer;\n}\n\n`;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0px 5px 5px 0px;\n    border: 0;\n    color: #ffffff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n    div {\n      margin: 0 16px;\n      flex: 1;\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","/* eslint-disable no-redeclare */\nimport React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport { Title, Form, Repositories, Error } from './styles';\nimport logoImg from '../../assets/logo.svg';\n\nimport api from '../../services/api';\n\ninterface Repository {\n  full_name: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n  description: string;\n}\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n  return (\n    <>\n      <img src={logoImg} alt=\"GitHub Explorer\" />\n      <Title>Explore reposit贸rios no Github</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          placeholder=\"Digite o nome do reposit贸rio\"\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error>{inputError}</Error>}\n      <Repositories>\n        {repositories.map(repo => (\n          <Link key={repo.full_name} to={`/repository/${repo.full_name}`}>\n            <img src={repo.owner.avatar_url} alt={repo.owner.login} />\n            <div>\n              <strong>{repo.full_name}</strong>\n              <p>{repo.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    &:hover {\n      color: #666;\n    }\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronsLeft, FiChevronRight } from 'react-icons/fi';\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n  description: string;\n}\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    async function loadData(): Promise<void> {\n      api.get(`repos/${params.repository}`).then(response => {\n        setRepository(response.data);\n      });\n\n      api.get(`repos/${params.repository}/issues`).then(response => {\n        setIssues(response.data);\n      });\n    }\n\n    loadData();\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronsLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n      {repository ? (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues Abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      ) : (\n        <p>Carregando...</p>\n      )}\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repository/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}